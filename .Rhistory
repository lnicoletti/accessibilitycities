cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/canada/toronto/cc/cluster_labels_no.csv')
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/montreal_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/montrÃ©al_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman")
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/canada/montreal/cc/cluster_labels_no.csv')
library(diceR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/san_francisco_short_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman")
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
View(dice.obj)
dice.obj$clusters
length(dice.obj$clusters)
write.csv(x = dice.obj$clusters, file = 'models/canada/toronto/cc/cluster_labels_short.csv')
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/san_francisco_short_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm") #
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("majority") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km",  "pam", "gmm", "hdbscan") "hc",
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km",  "pam", "gmm", "hdbscan") #"hc",
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
View(df)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
View(dice.obj)
library(diceR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/vancouver_short_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 4:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/canada/vancouver/cc/cluster_labels_short_4.csv')
library(diceR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/new_york_city_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/new_york_city/cc/cluster_labels.csv')
write.csv(x = dice.obj$clusters, file = 'models/united_states/new_york_city/cc/cluster_labels.csv')
dice.obj$clusters
library(diceR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/houston_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/houston/cc/cluster_labels.csv')
library(diceR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/philadelphia_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/philadelphia/cc/cluster_labels.csv')
write.csv(x = dice.obj$clusters, file = 'models/united_states/philadelphia/cc/cluster_labels.csv')
install.packages(sprintf)
install.packages('sprintf')
library(sprintf)
library(diceR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/miami_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/miami/cc/cluster_labels.csv')
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/miami/cc/cluster_labels_3_5.csv')
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/seattle_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/seattle/cc/cluster_labels_5k.csv')
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/seattle/cc/cluster_labels_3_5k.csv')
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/san_francisco_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/los_angeles_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/los_angeles/cc/cluster_labels_5k.csv')
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/san_francisco_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/san_francisco/cc/cluster_labels_3_5k.csv')
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/philadelphia_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/philadelphia/cc/cluster_labels_3_5k.csv')
library(diceR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/los_angeles_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/los_angeles/cc/cluster_labels_3_5k.csv')
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/houston_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/houston_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/houston/cc/cluster_labels_3_5k.csv')
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/chicago_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:5, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/chicago/cc/cluster_labels_3_5k.csv')
library(diceR)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 1. Load data ---------------------------
data = read.csv("data/interim/preprocessed/seattle_winsorized.csv")
df = prepare_data(data, scale = TRUE, type = c("conventional"), min.var = 1)
# Define clustering algorithms to be used
# 1. km - K-Means
# 2. pam - K-Medoids
# 3. hc - Hierarhical clustering
# 4. gmm - Gaussian Mixture Model
# 5. hdbscan - HDBSCAN
algorithms = c("km", "hc", "pam", "gmm", "hdbscan")
# Define distance functions to be used
distance = c("euclidean", "maximum", "manhattan", "canberra", "binary", "minkowski", "spearman") #"spearman"
# Define consensus functions
cons.funs = c("kmodes") #, "majority", "CSPA", "LCE", "LCA"
reps = 10 # n replicates
seed = 1235 # fix seed for reproducibility
dice.obj <- dice(df, nk = 3:4, reps = reps, algorithms = algorithms, distance = distance,
cons.funs = cons.funs, progress = TRUE, seed = seed, plot = FALSE)
write.csv(x = dice.obj$clusters, file = 'models/united_states/seattle/cc/cluster_labels_3_4k.csv')
